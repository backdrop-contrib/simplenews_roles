<?php
// $Id$

/**
 * Implementation of hook_cron().
 */
function simplenews_roles_cron() {
  foreach(variable_get('simplenews_roles_tids_rids', array()) as $tid => $rids) {
    simplenews_roles_update_subscriptions($tid, $rids);
  }
}

/**
 * Implementation of hook_form_alter().
 */
function simplenews_roles_form_alter($form_id, &$form) {
  if ($form_id == 'simplenews_admin_types_form' && !empty($form['tid']['#value'])) {
    $form['#submit']['simplenews_roles_newsletter_submit'] = array();
    $role_newsletters = variable_get('simplenews_roles_tids_rids', array());
    $form['roles'] = array('#type' => 'checkboxes', 
      '#title' => t('Automatically subscribe users in the following roles to this newsletter'),  
      '#default_value' => isset($role_newsletters[$form['tid']['#value']]),
      '#description' => t('This newsletter subscription list will consist of only students with active projects. This newsletter subscription is automatically updated. Any manually added users will be removed if they are not students with active projects.'),
      '#weight' => 10,
    );
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function simplenews_roles_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($node->type == 'simplenews') {
    switch ($op) {
      case 'insert':
      case 'update':
        // Strip out non-Simplenews terms from taxonomy for posterity.
        dpr($node->taxonomy);
        $term = module_invoke('simplenews', 'validate_taxonomy', $node->taxonomy);
        $tid = is_array($term) ? array_shift(array_values($term)) : 0;

        $role_newsletters = variable_get('simplenews_roles_tids_rids', array());
        if (isset($role_newsletters[$tid])) {
          simplenews_roles_update_subscriptions($tid, $role_newsletters[$tid]);
        }
        break;
    }
  }
}

/**
 * Implementation of hook_user().
 */
function simplenews_roles_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'after_update':
      foreach(variable_get('simplenews_roles_tids_rids', array()) as $tid => $rids) {
        simplenews_roles_update_subscriptions($tid, $rids);
      }
      break;
  }
}

/**
 * Forms API callback; additional submit handler for newsletter form. 
 */
function simplenews_roles_newsletter_submit($form_id, $form_values) {
  $role_newsletters = variable_get('simplenews_roles_tids_rids', array());
  if ($form_values['roles']) {
    $role_newsletters[$form_values['tid']] = $form_values['roles'];
    simplenews_roles_update_subscriptions($form_values['tid'], $form_values['roles']);
  }
  else {
    unset($role_newsletters[$form_values['tid']]);
  }
  variable_set('simplenews_roles_tids_rids', $role_newsletters);
}

/**
 * API function; clears subscription list for specified newsletter and replaces
 * it with users from the specified roles.
 */
function simplenews_roles_update_subscriptions($tid, $rids = array()) {
  if (is_array($rids) && $rids) {
    // Remove all subscriptions from this newsletter.
    $result = db_query("DELETE FROM {simplenews_snid_tid} WHERE tid = %d", $tid);
    
    // Subscribe all active users from roles.
    $result = db_query('SELECT DISTINCT u.mail FROM {users} u INNER JOIN ON u.uid = n.uid ORDER BY n.uid', BIGIDEAS_WORKFLOW_STATE_ACTIVE);
    while ($account = db_fetch_object($result)) {
      simplenews_subscribe_user($account->mail, $tid, FALSE);
    }
    
    watchdog('newsletter', t('Newsletter subscription list was automatically regenerated.'));
  }
}
